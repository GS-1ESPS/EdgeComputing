//VERS√ÉO COMENTADA DE TODO O C√ìDIGO, NO WOKWI EST√Å APENAS COM ALGUNS COMENT√ÅRIOS ESSENCIAIS

// Bibliotecas Utilizadas
#include <WiFi.h>                // Conex√£o Wi-Fi com ESP32
#include <HTTPClient.h>         // Requisi√ß√µes HTTP
#include <Wire.h>               // Comunica√ß√£o com o display LCD
#include <LiquidCrystal_I2C.h>  // Biblioteca do display LCD 16x2 via I2C
#include "DHT.h"                // Biblioteca para ler dados de temperatura e umidade do sensor DHT22
//obs: a do sensor ultrass√¥nico n√£o precisa ser instalada

// Defini√ß√µes de Pinos 
#define TRIG_PIN 5          // Pino do trigger do sensor ultrass√¥nico
#define ECHO_PIN 18         // Pino do echo do sensor ultrass√¥nico
#define CHUVA_PIN 19        // Pino digital simulado para detec√ß√£o de chuva
#define LED_PIN 2           // LED de alerta (on-board no ESP32)
#define DHT_PIN 15          // Pino conectado ao sensor DHT22
#define DHTTYPE DHT22       // Tipo do sensor DHT
#define SDA_PIN 21          // Pino SDA para comunica√ß√£o I2C (LCD)
#define SCL_PIN 22          // Pino SCL para comunica√ß√£o I2C (LCD)

// Wi-Fi 
const char* ssid = "Wokwi-GUEST";      // Nome da rede Wi-Fi (simulada no Wokwi)
const char* password = "";             // Senha da rede (sem senha no Wokwi)

// Token do TagoIO 
const char* TAGO_TOKEN = "4e6bb313-f0f8-4eb4-9ef5-aa0156e00d54";  // Token de autentica√ß√£o do dispositivo no TagoIO criado

// Inst√¢ncia dos dispositivos
DHT dht(DHT_PIN, DHTTYPE);                       // Inicializa o sensor DHT22
LiquidCrystal_I2C lcd(0x27, 16, 2);              // Inicializa o display LCD com endere√ßo 0x27 e 2 linhas de 16 caracteres

void setup() {
  Serial.begin(115200);                          // Inicializa o monitor serial para debug

  // Define os modos dos pinos
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(CHUVA_PIN, INPUT_PULLUP);              // INPUT_PULLUP simula um bot√£o ligado ao GND, da chuva
  pinMode(LED_PIN, OUTPUT);

  dht.begin();                                   // Inicializa o sensor dht
  Wire.begin(SDA_PIN, SCL_PIN);                  // Inicializa comunica√ß√£o I2C com os pinos definidos

  // Inicializa o LCD
  lcd.init();
  lcd.backlight();                               // Ativa a luz de fundo

  // Mensagem inicial no LCD
  lcd.setCursor(0, 0);
  lcd.print("ChuvaSegura");
  lcd.setCursor(0, 1);
  lcd.print("Conectando...");

  // Conecta ao Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  // Confirma conex√£o
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("WiFi: OK");
  delay(1000);
}

void loop() {
  // Medi√ß√£o de dist√¢ncia (n√≠vel da √°gua) com sensor ultrass√¥nico
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  long duracao = pulseIn(ECHO_PIN, HIGH);                  // Tempo para o sinal refletir de volta
  float distancia_cm = duracao * 0.034 / 2;                // Convers√£o para cm em rela√ß√£o √† dist√¢ncia

  // Leitura de temperatura e umidade
  float temperatura = dht.readTemperature();
  float umidade = dht.readHumidity();

  // Wokwi n√£o simula sensores de chuva reais, ent√£o usamos um pino digital (CHUVA_PIN) 
  // que pode ser ligado ou desligado manualmente para testes. 
  // >>> PARA TESTAR manualmente como se estivesse sempre chovendo:
  // Basta for√ßar o valor da vari√°vel:
  // remova o "!" para ler o valor diretamente:
  // int chuva = digitalRead(CHUVA_PIN);
  int chuva = digitalRead(CHUVA_PIN);  // Leitura do estado do pino de chuva (teve que ser manualmente, logo, testamos com 0 e 1)

  // Inicializa os estados de alerta
  bool alerta_agua = false;
  bool alerta_temp = false;
  bool alerta_umid = false;
  bool alerta_critico = false;

  // Regras de alerta baseadas nos dados lidos
  if (distancia_cm < 10) {
    alerta_agua = true;
    Serial.println("‚ö†Ô∏è ALERTA: N√≠vel de √°gua muito alto!");
  }

  if (temperatura > 40.0) {
    alerta_temp = true;
    Serial.println("‚ö†Ô∏è ALERTA: Temperatura extrema!");
  }

  if (umidade > 95.0) {
    alerta_umid = true;
    Serial.println("‚ö†Ô∏è ALERTA: Umidade excessiva detectada!");
  }

  if (chuva && distancia_cm < 15) {
    alerta_critico = true;
    Serial.println("üö® SITUA√á√ÉO CR√çTICA: CHUVA + N√çVEL ALTO!");
  }

  // LCD: Exibe alerta ou dados em tempo real - testes internos
  lcd.clear();
  if (alerta_critico) {
    lcd.setCursor(0, 0);
    lcd.print("!! ALERTA TOTAL !!");
    lcd.setCursor(0, 1);
    lcd.print("Evacuar!");
  } else if (alerta_agua) {
    lcd.setCursor(0, 0);
    lcd.print("Nivel Critico!");
    lcd.setCursor(0, 1);
    lcd.print("A: ");
    lcd.print(distancia_cm, 0);
    lcd.print("cm");
  } else {
    lcd.setCursor(0, 0);
    lcd.print("A:");
    lcd.print(distancia_cm, 0);
    lcd.print("cm ");
    lcd.print(chuva ? "C" : "S");  // C = Chuva, S = Seco
    lcd.setCursor(0, 1);
    lcd.print((int)temperatura);
    lcd.print("C ");
    lcd.print((int)umidade);
    lcd.print("%");
  }

  // LED de alerta (acende se qualquer alerta estiver ativo)
  digitalWrite(LED_PIN, alerta_agua || alerta_temp || alerta_umid || alerta_critico ? HIGH : LOW);

  // Envia os dados para a plataforma TagoIO via POST
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin("https://api.tago.io/data");                     // URL da API TagoIO
    http.addHeader("Content-Type", "application/json");         // Cabe√ßalho HTTP
    http.addHeader("Device-Token", TAGO_TOKEN);                 // Token de autentica√ß√£o

    // Monta o payload em JSON com os dados dos sensores
    String payload = "[";
    payload += "{\"variable\":\"nivel_agua\",\"value\":" + String(distancia_cm) + "},";
    payload += "{\"variable\":\"temperatura\",\"value\":" + String(temperatura) + "},";
    payload += "{\"variable\":\"umidade\",\"value\":" + String(umidade) + "},";
    payload += "{\"variable\":\"chuva\",\"value\":" + String(chuva) + "}";
    payload += "]";

    int resposta = http.POST(payload);                          // Envia requisi√ß√£o
    Serial.println("Resposta TagoIO: " + String(resposta));     // Mostra resposta no terminal
    http.end();                                                 // Encerra conex√£o
  }

  delay(20000); // Aguarda 20 segundos antes da pr√≥xima leitura
}
